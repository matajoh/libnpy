cmake_minimum_required( VERSION 3.8 )

# ------------ Find the libraries we need --------------------------

set( INCLUDE_CSHARP_DESC  "Specifies whether to build the C# sample" )
set( INCLUDE_CSHARP      ON  CACHE BOOL ${INCLUDE_CSHARP_DESC} )

if ( WIN32 )
    enable_language( CSharp )
else()
    set( INCLUDE_CSHARP OFF )
endif()

set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake )

if( INCLUDE_CSHARP )
  # Select the .NET architecture
  if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    set( CSHARP_PLATFORM "x64" CACHE STRING "C# target platform: x86, x64, anycpu, or itanium")
  else()
    set( CSHARP_PLATFORM "x86" CACHE STRING "C# target platform: x86, x64, anycpu, or itanium")
  endif()
endif()

set( LIBNPY_DIR ${CMAKE_SOURCE_DIR}/..)
find_library( npy_LIBRARIES npy ${LIBNPY_DIR}/lib )
find_package( ZLIB REQUIRED )

# ------------------- Settings --------------------------------------

# use C++11
set (CMAKE_CXX_STANDARD 11)
  
# ------------ Build the executable ---------------------------------

if( WIN32 )
  set( SAMPLES_DIR ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG> )
else()
  set( SAMPLES_DIR ${CMAKE_CURRENT_BINARY_DIR} )
endif()


add_executable( images images.cpp )

include_directories( 
  ${LIBNPY_DIR}/include
)

target_link_libraries( images
  ${npy_LIBRARIES}
)

add_custom_command( TARGET images POST_BUILD
                    COMMAND ${CMAKE_COMMAND}
                    ARGS -E copy_if_different ${CMAKE_SOURCE_DIR}/display.py ${SAMPLES_DIR}/display.py )

if( INCLUDE_CSHARP )
  message( "${NumpyIO_LIBRARIES}" )
  add_executable( images_net images_net.cs )
  set_target_properties( images_net PROPERTIES VS_DOTNET_REFERENCE_NumpyIO "${LIBNPY_DIR}/bin/NumpyIO.dll")
  target_compile_options( images_net PUBLIC "/unsafe" )
  add_custom_command( TARGET images_net POST_BUILD
                      COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different ${LIBNPY_DIR}/bin/NumpyIONative.dll ${SAMPLES_DIR}/NumpyIONative.dll )
endif()
