// ----------------------------------------------------------------------------
//
// Tensor.cs -- abstract base class for .NET Tensor objects
//
// Copyright (C) 2021 Matthew Johnson
//
// For conditions of distribution and use, see copyright notice in LICENSE
//
// ----------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace NumpyIO
{
    /// <summary>
    /// This class is the abstract base class for all .NET tensor objects.
    /// The autogenerated classes will all be subclasses of this class.
    /// </summary>
    /// <typeparam name="T">The data type</typeparam>
    /// <typeparam name="B">The buffer type</typeparam>
    public abstract class Tensor<T, B> where B : IList<T>
    {
        /// <summary>
        /// Copy the data from the provided buffer. These values will
        /// be copied into the underlying C++ type.
        /// </summary>
        /// <param name="source">The source buffer</param>
        public abstract void CopyFrom(B source);

        /// <summary>
        /// Save the tensor to the provided location on the disk.
        /// </summary>
        /// <param name="path">a valid location on the disk</param>
        public abstract void Save(string path);

        /// <summary>
        /// Save the tensor to the provided location on the disk.
        /// </summary>
        /// <param name="path">a valid location on the disk</param>
        /// <param name="endian">the endianness with which to write the tensor</param>
        public abstract void Save(string path, Endian endian);

        /// <summary>
        /// A readonly list of values. Changing values in this object
        /// will NOT affect the underlying Tensor.
        /// </summary>
        public IList<T> Values
        {
            get
            {
                return this.getValues();
            }
        }

        /// <summary>
        /// The shape of the tensor.
        /// </summary>
        public Shape Shape
        {
            get
            {
                return this.getShape();
            }
        }

        /// <summary>
        /// Whether the data is stored in FORTRAN, or column-major, order.
        /// </summary>
        public bool FortranOrder
        {
            get
            {
                return this.getFortranOrder();
            }
        }

        /// <summary>
        /// The data type of the tensor.
        /// </summary>
        public DataType DataType
        {
            get
            {
                return this.getDataType();
            }
        }

        /// <summary>
        /// The number of elements in the tensor.
        /// </summary>
        public uint Size
        {
            get
            {
                return this.getSize();
            }
        }

        /// <summary>
        /// Index operator.
        /// </summary>
        /// <param name="multiIndex">The index into the tensor</param>
        /// <returns>The value at the provided index</returns>
        public T this[params int[] multiIndex]
        {
            get
            {
                if (multiIndex.Length != this.Shape.Count)
                {
                    throw new ArgumentException("Incorrect number of indices");
                }

                return this.get(new Int32Buffer(multiIndex));
            }
            set
            {
                if (multiIndex.Length != this.Shape.Count)
                {
                    throw new ArgumentException("Incorrect number of indices");
                }

                this.set(new Int32Buffer(multiIndex), value);
            }
        }

        /// <summary>
        /// Autogenerated subclasses will implement this method. Maps to
        /// \link npy::tensor::values \endlink.
        /// </summary>
        /// <returns>A read-only buffer object</returns>
        protected abstract B getValues();

        /// <summary>
        /// Autogenerated subclasses will implement this method. Maps to
        /// \link npy::tensor::shape \endlink.
        /// </summary>
        /// <returns>A Shape object</returns>
        protected abstract Shape getShape();

        /// <summary>
        /// Autogenerated subclasses will implement this method. Maps to
        /// \link npy::tensor::fortran_order \endlink.
        /// </summary>
        /// <returns>Whether the data is stored in FORTRAN, or column-major, order</returns>
        protected abstract bool getFortranOrder();

        /// <summary>
        /// Autogenerated subclasses will implement this method. Maps to
        /// \link npy::tensor::dtype \endlink.
        /// </summary>
        /// <returns>The data type of the tensor</returns>
        protected abstract DataType getDataType();

        /// <summary>
        /// Autogenerated subclasses will implement this method. Maps to
        /// \link npy::tensor::size \endlink.
        /// </summary>
        /// <returns>The number of elements in the tensor</returns>
        protected abstract uint getSize();

        /// <summary>
        /// Autogenerated subclasses will implement this method. Maps to
        /// \link npy::tensor::get \endlink
        protected abstract T get(Int32Buffer multiIndex);

        /// <summary>
        /// Autogenereted subclasses will implement this method. Maps to
        /// \link npy::tensor::set \endlink
        /// </summary>
        protected abstract void set(Int32Buffer multiIndex, T value);
    }
}